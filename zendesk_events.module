<?php

require_once DRUPAL_ROOT . '/sites/all/modules/custom/zendesk_events/zendesk_api_client/vendor/autoload.php';

use Zendesk\API\HttpClient as ZendeskAPI;

$subdomain = "acquia1457030485";
$username  = "blake.scott@acquia.com"; // replace this with your registered email
$token     = "xlHUq4xOk4KI8IjBUWHw0CIwq7MeXPx3KFCACw8m"; // replace this with your token

$client = new ZendeskAPI($subdomain);
$client->setAuth('basic', ['username' => $username, 'token' => $token]);


//This code needs to be written:

# some code that grabs current calendar_event ticket numbers from the database.
$data = cache_get('cached_gcal_data');
$seed_tickets = array_values($data->data);
print_r($seed_tickets);
//$seed_tickets_data = $client->tickets($seed_tickets);
//$seed_tickets_orgs = array_column($seed_tickets->data, 'organization_id');

//Some org ids used to show prood of concept for matching org ids between arrays.  This will be removed when the above code is written.
$fake_calendar_org_ids = array(14114387868, 27811797827);


// Return all tickets from our custom view.
$tickets = $client->views(360049656394)->tickets();
//Grab the org ids from each ticket, and put them in an array.
$ticket_orgs = array_column($tickets->tickets, 'organization_id');
//Find org id matches, if any.
$matching_org_ids = array_intersect($ticket_orgs, $fake_calendar_org_ids);

//Print ticket org id array, then print org ids that match the fake calendar org ids:
print_r($ticket_orgs);
print_r(' . . . . .');
print_r($matching_org_ids);




//if else statement to determine whether to add internal comments, or to just expire what's currently in the view:

if (empty($matching_org_ids) == false)
    print_r("There's a match!");
    //add comment
    //add tags to all tickets
else
    print_r("There's not a match right now.");
    //add tags to all tickets

/*

# from senecal
function main_zendesk_checker() {
    # …
    # get google calendar events, cached or otherwise.
    $gcal_data = get_data_from_gcal();
    # …
  }

  function get_data_from_gcal() {

    # how long, in seconds, should these cached objects last?
    $cache_lifetime = 3600;

    # establish the current time as a unix timestamp.
    $current_time = time();

    # first, try to get cached gcal data.
    $cached_data = cache_get('cached_gcal_data');

    # if no cached data exist, or if the cached data are past their expiry, get fresh data.
    if ($cached_data === FALSE || $cached_data->expire < $current_time) {

      # retrieve the data with a google calendar API call.
      $fresh_data = gcal_api_call();

      # store the freshly retrieved data in cache.
      cache_set('cached_gcal_data', $fresh_data, 'cache', $current_time + $cache_lifetime);

      # return the fresh data.
      return $fresh_data;
    }

    # otherwise, return the cached data.
    else {
      return $cached_data->data;
    }
  }


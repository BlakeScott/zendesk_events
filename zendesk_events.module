<?php

require_once DRUPAL_ROOT . '/sites/all/modules/custom/zendesk_events/zendesk_api_client/vendor/autoload.php';
use Zendesk\API\HttpClient as ZendeskAPI;

// Initalizes the ZD Client
function zendesk_client_init() {

    $subdomain = variable_get('zendesk_events_zd_api_subdomain', FALSE);
    $username = variable_get('zendesk_events_zd_api_user', FALSE);
    $token = variable_get('zendesk_events_zd_api_token', FALSE);

    if (!$subdomain || !$username || !$token) {
      throw new \Exception("Fatal: This script requires you to configure a Zendesk API endpoint and user. Please do this by setting the 'zendesk_events_zd_api_subdomain', 'zendesk_events_zd_api_user', and 'zendesk_events_zd_api_token' variables.");
    }
    else {
    $client = new ZendeskAPI($subdomain);
    $client->setAuth('basic', ['username' => $username, 'token' => $token]);
    return $client;
    }
}
zendesk_client_init();

//Take the TICKET IDs from Google Calendar and grab their ORG IDs from Zendesk.
function orgs_from_gcal() {
    $client = zendesk_client_init();
    //Grab the current calendar_events.module generated TICKET IDs from cache.
    // ****Add code that Aaron Senecal wrote to determine the freshness of the data.*****
    $orgs_from_gcal = array();
    $data = cache_get('cached_gcal_data');
    if ($data != null) {
      $seed_tickets = array_values($data->data);
      // $orgs_from_gcal = array();
      foreach($seed_tickets as $ticket) {
        $x = $client->tickets()->find($ticket);
        $y = $x->ticket->organization_id;
        $z = array_push($orgs_from_gcal, $y);
      }
      //print the result
      echo "<br>";
      print_r('These are the ORG IDs for the current events: ');
      var_dump($orgs_from_gcal);
      echo "<br>";
      return $orgs_from_gcal;
    }
    // $seed_tickets = array_values($data->data);
    // $orgs_from_gcal = array();
    // foreach($seed_tickets as $ticket) {
    //   $x = $client->tickets()->find($ticket);
    //   $y = $x->ticket->organization_id;
    //   $z = array_push($orgs_from_gcal, $y);
    // }
    // //print the result
    // echo "<br>";
    // print_r('These are the ORG IDs for the current events: ');
    // var_dump($orgs_from_gcal);
    // echo "<br>";
    // return $orgs_from_gcal;
}
// orgs_from_gcal();

//Determine whether to add internal comments, or to just expire what's currently in the view.
function addComment() {
    $client = zendesk_client_init();
    $gcal_orgs = orgs_from_gcal();
    // Return all tickets from our custom Zendesk view.
    $tickets_from_zd_view = $client->views(360049656394)->tickets();
    //Grab the TICKET IDs for each ticket, put them in an array, then print the result.
    $zd_ticket_ids = array_column($tickets_from_zd_view->tickets, 'id');
    echo "<br>";
    print_r("These are all the TICKET IDs from our Zendesk View:  ");
    print_r($zd_ticket_ids);
    //Grab the ORG IDs for each ticket, put them in an array, then print the result.
    $zd_ticket_orgs = array_column($tickets_from_zd_view->tickets, 'organization_id');
    echo "<br>";
    print_r("These are all the ORG IDs from our Zendesk View:  ");
    print_r($zd_ticket_orgs);
    echo "<br>";
    //Find ORG ID matches between Google Calendar and the Zendesk view.
    $matching_org_ids = array_intersect($zd_ticket_orgs, $gcal_orgs);

    if (empty($matching_org_ids) == false) {
        echo "<br>";
        print_r("Yes, there are ORG ID matches between what's in the Events Calendar and what's in the Zendesk View!  Here are the matching ORG IDs");
        echo "<br>";

        foreach($tickets_from_zd_view->tickets as $ticket) {
            $array = array();
            $x = $ticket->id;
            $y = $ticket->organization_id;
            $z = array_push($array, $x);

            if(in_array($y, $gcal_orgs)) {
                print_r("Adding Comment and Tag");
                $client->tickets()->updateMany( [
                        'ids'    => $array,
                        'comment'  => [
                                    'body' => 'Hi Supporta! This customer may be having a High Traffic event right now. Please check the `Customers` calendar for more information',
                                    'public' => false,
                                ],
                        'additional_tags' => ['checked'],
                    ]);
            }
            else {
                $client->tickets()->updateMany( [
                    'ids'    => $zd_ticket_ids,
                    'additional_tags' => ['checked'],
                ]);

            }
        }
    }
    else {
        echo "<br>";
        print_r("No, there are not any ORG ID matches right now between what's in the Events Calendar and what's in the Zendesk View, so this array is empty:");
        echo "<br>";
        try {
            $client->tickets()->updateMany( [

            'ids' => $zd_ticket_ids,
            'additional_tags' => ['checked'],
         ]);
      }
      catch (\Zendesk\API\Exceptions\ApiResponseException $e) {
        echo "API Response (if there is a 400 bad response, calendar/ticket matches): ".$e->getMessage().'</br>';
     }
  }
    print_r($matching_org_ids);
    return $matching_org_ids;
}
addComment();

//This is where the master function should live in the `.module` file. When you call  `drush zd-command`  the PHP code will run in this function.
// function drush_zendesk_events_zd_command()
// {
//     //Instantiate the ZD client
//     zendesk_client_init();
//     //Take the TICKET IDs from Google Calendar and grab their ORG IDs from Zendesk.
//     orgs_from_gcal();
//     // Put in here the master function you want drush to run.
//     addComment();
//  }
 //drush_zendesk_events_zd_command();

 function event_tickets_from_zendesk() {
    $client = zendesk_client_init();
    # how long, in seconds, should these cached objects last?
    $cache_lifetime = 3600;
    # establish the current time as a unix timestamp.
    $current_time = time();
    // WILL NEED TO ADD NEW VIEW WITH TICKET TYPE EVENT
    $tickets_from_events_view = $client->views(360068822093)->tickets();
    $new_events_notification_array = array();
    $tickets_to_close = array();

    foreach($tickets_from_events_view->tickets as $ticket) {
        $ticket_info = array();
        $id = $ticket->id;
        array_push($tickets_to_close, $id);
        $org_id = $ticket->organization_id;
        $subject =  $ticket->subject;
        $description = $ticket->description;

        foreach($ticket->custom_fields as $custom_field){
          if ($custom_field->id == 360016075373) {
             $start_date = $custom_field->value;
          } else if ($custom_field->id == 360016075393) {
             $end_date = $custom_field->value;
          } continue;
        }
        array_push($ticket_info, $id, $subject, $description, $start_date, $end_date);
        array_push($new_events_notification_array, $ticket_info);
    }

    cache_set('cached_event_tickets', $new_events_notification_array, 'cache', $current_time + $cache_lifetime);

// UPDATE THE ZENDESK TICKETS TO AUTOCLOSE AFTER BEING ADDED TO THE CALENDAR

    try {
        // print_r($tickets_from_events_view);
        $updatedTickets = $client->tickets()->updateMany(
            [
              'ids'    => $tickets_to_close,
              'assignee_id' => 370668600233,
              'status' => 'solved',
            ]
        );
        // print_r($updatedTickets->job_status);
        }
    catch (\Zendesk\API\Exceptions\ApiResponseException $e) {
    echo "API Response (event notification autosolve): ".$e->getMessage().'</br>';
    }
  }

event_tickets_from_zendesk();

// function drush_zendesk_events_fetch()
// {
//     //GET Zendesk Tickets with Event Type
//     event_tickets_from_zendesk();
//  }

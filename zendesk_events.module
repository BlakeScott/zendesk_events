<?php

require_once DRUPAL_ROOT . '/sites/all/modules/custom/zendesk_events/zendesk_api_client/vendor/autoload.php';
use Zendesk\API\HttpClient as ZendeskAPI;


// Initalizes the ZD Client
function zendesk_client_init() {
    $subdomain = "acquia1457030485";
    $username  = "blake.scott@acquia.com"; // replace this with your registered email
    $token     = "xlHUq4xOk4KI8IjBUWHw0CIwq7MeXPx3KFCACw8m"; // replace this with your token

    $client = new ZendeskAPI($subdomain);
    $client->setAuth('basic', ['username' => $username, 'token' => $token]);
    return $client;
}
//Instantiate the ZD client
zendesk_client_init();



//Take the TICKET IDs from Google Calendar and grab their ORG IDs from Zendesk.
function orgs_from_gcal() {
    $client = zendesk_client_init();
    //Grab the current calendar_events.module generated TICKET IDs from cache.
    // ****Add code that Aaron Senecal wrote to determine the freshness of the data.*****
    $data = cache_get('cached_gcal_data');
    $seed_tickets = array_values($data->data);
    $orgs_from_gcal = array();
    foreach($seed_tickets as $ticket) {
      $x = $client->tickets()->find($ticket);
      $y = $x->ticket->organization_id;
      $z = array_push($orgs_from_gcal, $y);
    }
    //print the result
    echo "<br>";
    print_r('These are the ORG IDs for the current events: ');
    var_dump($orgs_from_gcal);
    echo "<br>";
    return $orgs_from_gcal;
}
orgs_from_gcal();


//Determine whether to add internal comments, or to just expire what's currently in the view.
function addComment() {
    $client = zendesk_client_init();
    $gcal_orgs = orgs_from_gcal();
    // Return all tickets from our custom Zendesk view.
    $tickets_from_zd_view = $client->views(360049656394)->tickets();

    //Grab the TICKET IDs for each ticket, put them in an array, then print the result.
    $zd_ticket_ids = array_column($tickets_from_zd_view->tickets, 'id');
    echo "<br>";
    print_r("These are all the TICKET IDs from our Zendesk View:  ");
    print_r($zd_ticket_ids);

    //Grab the ORG IDs for each ticket, put them in an array, then print the result.
    $zd_ticket_orgs = array_column($tickets_from_zd_view->tickets, 'organization_id');
    echo "<br>";
    print_r("These are all the ORG IDs from our Zendesk View:  ");
    print_r($zd_ticket_orgs);
    echo "<br>";

    //Find ORG ID matches between Google Calendar and the Zendesk view.
    $matching_org_ids = array_intersect($zd_ticket_orgs, $gcal_orgs);

    if (empty($matching_org_ids) == false) {
        echo "<br>";
        print_r("Yes, there are ORG ID matches between what's in the Events Calendar and what's in the Zendesk View!  Here are the matching ORG IDs");
        echo "<br>";

        foreach($tickets_from_zd_view->tickets as $ticket) {
            $array = array();
            $x = $ticket->id;
            $y = $ticket->organization_id;
            $z = array_push($array, $x);

            if(in_array($y, $gcal_orgs)) {

                print_r("Adding Comment and Tag");
                $client->tickets()->updateMany( [
                        'ids'    => $array,
                        'comment'  => [
                                    'body' => 'Hi Supporta! This customer may be having a High Traffic event right now. Please check the `Customers` calendar for more information',
                                    'public' => false,
                                ],
                        'additional_tags' => ['checked'],
                    ]);

            }
            else {
                //print_r("Just adding Tag.");

                $client->tickets()->updateMany( [

                    'ids'    => $zd_ticket_ids,
                    'additional_tags' => ['checked'],

                ]);

            }
        }
    }
    else {
        echo "<br>";
        print_r("No, there are not any ORG ID matches right now between what's in the Events Calendar and what's in the Zendesk View, so this array is empty:");
        echo "<br>";
        try {
            $client->tickets()->updateMany( [

            'ids' => $zd_ticket_ids,
            'additional_tags' => ['checked'],

         ]);
      }

      catch (\Zendesk\API\Exceptions\ApiResponseException $e) {
        echo $e->getMessage().'</br>';
     }
  }
    print_r($matching_org_ids);
    return $matching_org_ids;
}
addComment();

/*
//This is where the master function should live in the `.module` file. When you call  `drush zd-command`  the PHP code will run in this function.
function drush_zendesk_events_zd_command()
{
    // Put in here the master function you want drush to run.
    addComment();
 }

 drush_zendesk_events_zd_command();
*/

/*
 function addComment($array_of_customer_events)
{
    $client = zendesk_client_init();
    try {
      $updatedTickets = $client->tickets()->update(
          [
              'id'    => $array_of_customer_events,
              'comment'  => [
                             'body' => '(Hi Supporta! This customer may be having a High Traffic event right now. Please check the `Customers` calendar for more information',
                             'public' => false,
                         ],
          ]
      );
    }

    catch (\Zendesk\API\Exceptions\ApiResponseException $e) {
        echo $e->getMessage().'</br>';
    }
}